<alvisnlp-plan id="entity-occurrences">
  <param name="entities">
    <alias module="entries" param="target"/>
    <alias module="clean.features" param="target"/>
  </param>

  <param name="candidates">
    <alias module="candidates" param="target"/>
  </param>

  <param name="caseInsensitive">
    <alias module="project" param="caseInsensitive"/>
  </param>

  <param name="wordStartCaseInsensitive">
    <alias module="project" param="wordStartCaseInsensitive"/>
  </param>

  <param name="aggregateCaseFolding">
    <alias module="case-folding" param="value"/>
  </param>

  <param name="aggregatedFile">
    <alias module="write.aggregated" param="outputFile"/>
  </param>

  <param name="fullFile">
    <alias module="write.full" param="corpusFile"/>
  </param>

  <entries class="Action">
    <target>documents.sections.relations[@kind == "text-bound"].tuples</target>
    <action>set:feat:check-annotations_entity-occurrences("please-check")</action>
    <setFeatures/>
  </entries>

  <candidates class="Action">
    <target>documents.sections.relations[@kind == "text-bound"].tuples</target>
    <action>set:feat:check-annotations_entity-occurrences_candidate("yes")</action>
    <setFeatures/>
  </candidates>

  <match-relation class="Action">
    <target>documents.sections</target>
    <action>new:relation:check-annotations_entity-occurrences</action>
    <createRelations/>
  </match-relation>

  <project class="ElementProjector">
    <entries>sort:nsval(documents.sections.relations.tuples[@check-annotations_entity-occurrences == "please-check"], @form ^ "__" ^ @type)</entries>
    <key>@form</key>
    <targetLayer>check-annotations_entity-occurrences</targetLayer>
    <action>
      $ as target.section.relations:check-annotations_entity-occurrences.new:tuple.(
        set:arg:occurrence(target) |
        set:arg:entity(entry)
      )
    </action>
    <createTuples/>
    <setArguments/>
  </project>

  <exclusive-zones class="Action">
    <target>documents.sections.relations:check-annotations_entity-occurrences.tuples[not args:occurrence.outside:check-annotations_exclusive-zones]</target>
    <action>delete</action>
    <deleteElements/>
  </exclusive-zones>

  <overlaps>
    <annotations class="RemoveOverlaps">
      <layer>check-annotations_entity-occurrences</layer>
    </annotations>

    <tuples class="Action">
      <target>documents.sections.relations:check-annotations_entity-occurrences.tuples[not args:occurrence]</target>
      <action>delete</action>
      <deleteElements/>
    </tuples>
  </overlaps>
  
  <match>
    <exact class="Action">
      <target>documents.sections.relations:check-annotations_entity-occurrences.tuples</target>
      <action>
	args:occurrence.span:alvisae.nav:tuples(@type)[@check-annotations_entity-occurrences_candidate == "yes"] as match.
	target.(
	  set:feat:match-boundaries("boundaries-exact") |
	  set:arg:match(match)
	)
      </action>
      <setFeatures/>
      <setArguments/>
    </exact>

    <remove-self-match class="Action">
      <target>documents.sections.relations:check-annotations_entity-occurrences.tuples[args:entity.id:unique == args:match.id:unique]</target>
      <action>
	delete
      </action>
      <deleteElements/>
    </remove-self-match>

    <broader class="Action">
      <target>documents.sections.relations:check-annotations_entity-occurrences.tuples[not args:match]</target>
      <action>
	args:occurrence.outside:alvisae.nav:tuples(@type)[@check-annotations_entity-occurrences_candidate == "yes"] as match.
	target.(
	  set:feat:match-boundaries("boundaries-broader") |
	  set:arg:match(match)
	)
      </action>
      <setFeatures/>
      <setArguments/>
    </broader>

    <narrower class="Action">
      <target>documents.sections.relations:check-annotations_entity-occurrences.tuples[not args:match]</target>
      <action>
	args:occurrence.inside:alvisae.nav:tuples(@type)[@check-annotations_entity-occurrences_candidate == "yes"] as match.
	target.(
	  set:feat:match-boundaries("boundaries-narrower") |
	  set:arg:match(match)
	)
      </action>
      <setFeatures/>
      <setArguments/>
    </narrower>

    <overlapping class="Action">
      <target>documents.sections.relations:check-annotations_entity-occurrences.tuples[not args:match]</target>
      <action>
	args:occurrence.overlapping:alvisae.nav:tuples(@type)[@check-annotations_entity-occurrences_candidate == "yes"] as match.
	target.(
	  set:feat:match-boundaries("boundaries-overlapping") |
	  set:arg:match(match)
	)
      </action>
      <setFeatures/>
      <setArguments/>
    </overlapping>

    <type-comparison class="Action">
      <target>documents.sections.relations:check-annotations_entity-occurrences.tuples[args:match]</target>
      <action>
	set:feat:match-type(if args:match.@type == args:entity.@type then "type-identical" else "type-mismatch")
      </action>
      <setFeatures/>
    </type-comparison>

    <none class="Action">
      <target>documents.sections.relations:check-annotations_entity-occurrences.tuples[not args:match]</target>
      <action>
	set:feat:match-boundaries("boundaries-none")
      </action>
      <setFeatures/>
    </none>
  </match>

  <case-folding class="SetFeature">
    <target>$</target>
    <feature>check-annotation_same-property_case-folding</feature>
    <value>false</value>
  </case-folding>

  <write>
    <aggregated class="PythonScript">
      <script>check-annotations/entity-occurrences.py</script>
      <callPython/>
      <scriptParams>
	<caseFolding>@check-annotation_same-property_case-folding</caseFolding>
      </scriptParams>
    </aggregated>

    <full class="TabularExport">
      <outDir>.</outDir>
      <lines>documents.sections.relations:check-annotations_entity-occurrences.tuples[@match-boundaries != "boundaries-exact" and @match-type != "type-identical"]</lines>
      <trueCSV/>
      <columns separator=";">
	args:entity.relation.section.document.(@campaign-id ^ " (" ^ @campaign-name ^ ")");
	args:entity.relation.section.document.@annotator;
	args:entity.relation.section.document.(@id ^ " (" ^ @external-id ^ ")");
	args:entity.relation.section.document.@alvisae-url;
	args:entity.(@start_ ^ "-" ^ @end_);
	args:entity.@id;
	args:entity.@type;
	str:normalizeSpace(args:entity.args:frag0.ctx:before(20));
	str:normalizeSpace(args:entity.@superform);
	str:normalizeSpace(args:entity.args{-1}.ctx:after(20));
	if @match-boundaries == "boundaries-none" then @match-boundaries else (
	if @match-boundaries == "boundaries-exact" then @match-type else (
	if @match-type == "type-identical" then @match-boundaries else (
	@match-boundaries ^ ", " ^ @match-type
	)));
	(if @match-boundaries == "boundaries-none" then args:occurrence else args:match.relation).section.document.(@campaign-id ^ " (" ^ @campaign-name ^ ")");
	(if @match-boundaries == "boundaries-none" then args:occurrence else args:match.relation).section.document.@annotator;
	(if @match-boundaries == "boundaries-none" then args:occurrence else args:match.relation).section.document.(@id ^ " (" ^ @external-id ^ ")");
	(if @match-boundaries == "boundaries-none" then args:occurrence else args:match.relation).section.document.@alvisae-url;
	if @match-boundaries == "boundaries-none" then args:occurrence.(start ^ "-" ^ end) else args:match.(@start_ ^ "-" ^ @end_);
	(if @match-boundaries == "boundaries-none" then args:occurrence else args:match.relation).@id;
	(if @match-boundaries == "boundaries-none" then args:occurrence else args:match.relation).@type;
	str:normalizeSpace((if @match-boundaries == "boundaries-none" then args:occurrence else args:match.args:frag0).ctx:before(20));
	str:normalizeSpace(if @match-boundaries == "boundaries-none" then args:occurrence.@form else args:match.@superform);
	str:normalizeSpace((if @match-boundaries == "boundaries-none" then args:occurrence else args:match.args{-1}).ctx:after(20))
      </columns>
      <headers>
	"ENTITY_CAMPAIGN",
	"ENTITY_ANNOTATOR",
	"ENTITY_DOCUMENT",
	"ENTITY_DOC_URL",
	"ENTITY_OFFSET",
	"ENTITY_ID",
	"ENTITY_TYPE",
	"ENTITY_BEFORE",
	"ENTITY_FORM",
	"ENTITY_AFTER",
	"MATCH_LEVEL",
	"MATCH_CAMPAIGN",
	"MATCH_ANNOTATOR",
	"MATCH_DOCUMENT",
	"MATCH_DOC_URL",
	"MATCH_OFFSET",
	"MATCH_ID",
	"MATCH_TYPE",
	"MATCH_BEFORE",
	"MATCH_FORM",
	"MATCH_AFTER"
      </headers>
    </full>
  </write>

  <clean>
    <layer class="ClearLayers">
      <layerNames>check-annotations_entity-occurrences</layerNames>
    </layer>

    <relation class="Action">
      <target>documents.sections.relations:check-annotations_entity-occurrences</target>
      <action>delete</action>
      <deleteElements/>
    </relation>

    <features class="Action">
      <target>documents.sections.relations[@kind == "text-bound"].tuples</target>
      <action>
	set:remove-feature:check-annotations_entity-occurrences |
	set:remove-feature:check-annotations_entity-occurrences_candidate
      </action>
      <setFeatures/>
    </features>

    <corpus-features class="Action">
      <target>$</target>
      <action>
	set:remove-feature:check-annotations_entity-occurrences_case-folding
      </action>
      <setFeatures/>
    </corpus-features>
  </clean>
</alvisnlp-plan>
