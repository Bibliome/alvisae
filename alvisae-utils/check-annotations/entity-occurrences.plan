<alvisnlp-plan id="entity-occurrences">
  <param name="entities">
    <alias module="entries" param="target"/>
    <alias module="clean.feature" param="target"/>
  </param>

  <param name="candidates">
    <alias module="candidates" param="target"/>
  </param>

  <param name="caseInsensitive">
    <alias module="project" param="caseInsensitive"/>
  </param>

  <param name="wordStartCaseInsensitive">
    <alias module="project" param="wordStartCaseInsensitive"/>
  </param>

  <param name="aggregateCaseFolding">
    <alias module="case-folding" param="value"/>
  </param>

  <param name="outFile">
    <alias module="write" param="outputFile"/>
  </param>

  <entries class="Action">
    <target>documents.sections.relations[@kind == "text-bound"].tuples</target>
    <action>set:feat:check-annotations_entity-occurrences("please-check")</action>
    <setFeatures/>
  </entries>

  <candidates class="Action">
    <target>documents.sections.relations[@kind == "text-bound"].tuples</target>
    <action>set:feat:check-annotations_entity-occurrences_candidate("yes")</action>
    <setFeatures/>
  </candidates>

  <match-relation class="Action">
    <target>documents.sections</target>
    <action>new:relation:check-annotations_entity-occurrences</action>
    <createRelations/>
  </match-relation>

  <project class="ElementProjector">
    <entries>sort:nsval(documents.sections.relations.tuples[@check-annotations_entity-occurrences == "please-check"], @form ^ "__" ^ @type)</entries>
    <key>@form</key>
    <targetLayer>check-annotations_entity-occurrences</targetLayer>
    <action>
      $ as target.section.relations:check-annotations_entity-occurrences.new:tuple.(
        set:arg:occurrence(target) |
        set:arg:entity(entry)
      )
    </action>
    <createTuples/>
    <setArguments/>
  </project>

  <overlaps>
    <annotations class="RemoveOverlaps">
      <layer>check-annotations_entity-occurrences</layer>
    </annotations>

    <tuples class="Action">
      <target>documents.sections.relations:check-annotations_entity-occurrences.tuples[not args:occurrence]</target>
      <action>delete</action>
      <deleteElements/>
    </tuples>
  </overlaps>

  <match>
    <exact class="Action">
      <target>documents.sections.relations:check-annotations_entity-occurrences.tuples</target>
      <action>
	args:occurrence.span:alvisae.nav:tuples(@type)[@check-annotations_entity-occurrences_candidate == "yes"] as match.
	target.(
	  set:feat:match-boundaries("boundaries-exact") |
	  set:arg:match(match)
	)
      </action>
      <setFeatures/>
      <setArguments/>
    </exact>

    <remove-self-match class="Action">
      <target>documents.sections.relations:check-annotations_entity-occurrences.tuples[args:entity.id:unique == args:match.id:unique]</target>
      <action>
	delete
      </action>
      <deleteElements/>
    </remove-self-match>

    <broader class="Action">
      <target>documents.sections.relations:check-annotations_entity-occurrences.tuples[not args:match]</target>
      <action>
	args:occurrence.outside:alvisae.nav:tuples(@type)[@check-annotations_entity-occurrences_candidate == "yes"] as match.
	target.(
	  set:feat:match-boundaries("boundaries-broader") |
	  set:arg:match(match)
	)
      </action>
      <setFeatures/>
      <setArguments/>
    </broader>

    <narrower class="Action">
      <target>documents.sections.relations:check-annotations_entity-occurrences.tuples[not args:match]</target>
      <action>
	args:occurrence.inside:alvisae.nav:tuples(@type)[@check-annotations_entity-occurrences_candidate == "yes"] as match.
	target.(
	  set:feat:match-boundaries("boundaries-narrower") |
	  set:arg:match(match)
	)
      </action>
      <setFeatures/>
      <setArguments/>
    </narrower>

    <overlapping class="Action">
      <target>documents.sections.relations:check-annotations_entity-occurrences.tuples[not args:match]</target>
      <action>
	args:occurrence.overlapping:alvisae.nav:tuples(@type)[@check-annotations_entity-occurrences_candidate == "yes"] as match.
	target.(
	  set:feat:match-boundaries("boundaries-overlapping") |
	  set:arg:match(match)
	)
      </action>
      <setFeatures/>
      <setArguments/>
    </overlapping>

    <type-comparison class="Action">
      <target>documents.sections.relations:check-annotations_entity-occurrences.tuples[args:match]</target>
      <action>
	set:feat:match-type(if args:match.@type == args:entity.@type then "type-identical" else "type-mismatch")
      </action>
      <setFeatures/>
    </type-comparison>

    <none class="Action">
      <target>documents.sections.relations:check-annotations_entity-occurrences.tuples[not args:match]</target>
      <action>
	set:feat:match-boundaries("boundaries-none")
      </action>
      <setFeatures/>
    </none>
  </match>

  <case-folding class="SetFeature">
    <target>$</target>
    <feature>check-annotation_same-property_case-folding</feature>
  </case-folding>

  <write class="PythonScript">
    <script>check-annotations/entity-occurrences.py</script>
    <layers>alvisae,check-annotations_entity-occurrences</layers>
    <callPython/>
    <scriptParams>
      <caseFolding>@check-annotation_same-property_case-folding</caseFolding>
    </scriptParams>
  </write>

  <clean>
    <layer class="ClearLayers">
      <layerNames>check-annotations_entity-occurrences</layerNames>
    </layer>

    <relation class="Action">
      <target>documents.sections.relations:check-annotations_entity-occurrences</target>
      <action>delete</action>
      <deleteElements/>
    </relation>

    <features class="Action">
      <target>documents.sections.relations[@kind == "text-bound"].tuples</target>
      <action>
	set:remove-feature:check-annotations_entity-occurrences |
	set:remove-feature:check-annotations_entity-occurrences_candidate |
	set:remove-feature:check-annotations_entity-occurrences_case-folding
      </action>
      <setFeatures/>
    </features>
  </clean>
</alvisnlp-plan>
