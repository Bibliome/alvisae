<alvisnlp-plan id="alvisae2bionlp-st">
  <param name="db-schema">
    <alias module="read" param="schema"/>
  </param>
  
  <param name="db-url">
    <alias module="read" param="url"/>
  </param>
  
  <param name="db-login">
    <alias module="read" param="username"/>
  </param>
  
  <param name="db-password">
    <alias module="read" param="password"/>
  </param>
  
  <param name="campaigns">
    <alias module="read" param="campaignId"/>
  </param>
    
  <param name="task">
    <alias module="read" param="taskName"/>
  </param>
    
  <param name="user">
    <alias module="read" param="userNames"/>
  </param>
    
  <param name="docs">
    <alias module="read" param="docIds"/>
  </param>

  <param name="normalizations-file">
    <alias module="normalizations" param="mappingFile"/>
  </param>

  <param name="type-exclusion-file">
    <alias module="exclude-types.map" param="mappingFile"/>
  </param>

  <param name="out-dir">
    <alias module="write.docs" param="outDir"/>
    <alias module="write.text" param="outDir"/>
    <alias module="write.layout" param="outDir"/>
    <alias module="write.entities" param="outDir"/>
    <alias module="write.normalizations" param="outDir"/>
    <alias module="write.relations" param="outDir"/>
  </param>

  <read class="AlvisAEReader">
    <userFeature>user</userFeature>
    <section>text</section>
    <typeFeature>__TYPE</typeFeature>
    <fragmentTypeFeature>__TYPE</fragmentTypeFeature>
    <campaignIdFeature>campaign-id</campaignIdFeature>
    <campaignNameFeature>campaign-name</campaignNameFeature>
    <userIdFeature>user-id</userIdFeature>
    <taskIdFeature>task-id</taskIdFeature>
    <campaignNameFeature>campaign-name</campaignNameFeature>
  </read>

  <exclude-types>
    <map class="FileMapper">
      <target>documents.sections.relations</target>
      <form>@name</form>
      <targetFeatures>excluded</targetFeatures>
    </map>

    <delete class="Action">
      <target>documents.sections.relations[@excluded]</target>
      <action>delete</action>
      <deleteElements/>
    </delete>
  </exclude-types>

  <layout>
    <create-relation class="Action">
      <target>documents.sections</target>
      <action>new:relation:HTML.set:feat:kind("layout")</action>
      <createRelations/>
      <setFeatures/>
    </create-relation>

    <create-tuples class="Action">
      <target>documents.sections.layer:html</target>
      <action>
	section.relations:HTML.new:tuple.(
	set:arg:arg0(target) |
	set:feat:__TYPE(target.@tag)
	)
      </action>
      <createTuples/>
      <setArguments/>
      <setFeatures/>
    </create-tuples>
  </layout>

  <normalizations class="FileMapper">
    <target>documents.sections.relations[@kind == "text-bound"].tuples</target>
    <form>@__TYPE</form>
    <targetFeatures>,normalization-feature,normalization-name</targetFeatures>
  </normalizations>

  <ids>
    <entities-and-entities class="Action">
      <target>documents.sections</target>
      <action>id:enumerate:tid:T(sort:ival(relations[@kind == "text-bound" or @kind == "layout"].tuples, (if relation.@name == "HTML" then 1 else 1000000) * args:frag0.start))</action>
      <setFeatures/>
    </entities-and-entities>

    <normalizations class="Action">
      <target>documents.sections</target>
      <action>id:enumerate:nid:N(sort:ival(relations[@kind == "text-bound"].tuples[@normalization-feature], args:frag0.start))</action>
      <setFeatures/>
    </normalizations>

    <relations class="Action">
      <target>documents.sections</target>
      <action>id:enumerate:rid:R(sort:ival(relations[@kind == "relation"].tuples, args[args:frag0]{0}.args:frag0.start))</action>
      <setFeatures/>
    </relations>
  </ids>

  <write>
    <docs class="TabularExport">
      <corpusFile>docs.txt</corpusFile>
      <lines>documents</lines>
      <columns>@external-id</columns>
    </docs>
    
    <text class="TabularExport">
      <files>documents</files>
      <fileName>"txt/" ^ @external-id ^ ".txt"</fileName>
      <lines>sections</lines>
      <columns>contents</columns>
    </text>

    <layout class="TabularExport">
      <files>documents</files>
      <fileName>"layout/" ^ @external-id ^ ".lay"</fileName>
      <lines>sort:ival(sections.relations:HTML.tuples, args:frag0.start)</lines>
      <columns separator="|">
	@tid|
	@__TYPE ^ " " ^ str:join:';'(args, start ^ " " ^ end)|
	str:normalizeSpace(str:join:' '(args, @form))
      </columns>
    </layout>

    <entities class="TabularExport">
      <files>documents</files>
      <fileName>"entities/" ^ @external-id ^ ".ent"</fileName>
      <lines>sort:ival(sections.relations[@kind == "text-bound" and not @layout].tuples, args:frag0.start)</lines>
      <columns separator="|">
	@tid|
	@__TYPE ^ " " ^ str:join:';'(args, start ^ " " ^ end)|
	str:normalizeSpace(str:join:' '(args, @form))
      </columns>
    </entities>

    <normalizations class="TabularExport">
      <files>documents</files>
      <fileName>"normalizations/" ^ @external-id ^ ".norm"</fileName>
      <lines>sort:ival(sections.relations[@kind == "text-bound"].tuples[@normalization-feature], args:frag0.start)</lines>
      <columns separator="|">
	@nid|
	@normalization-name ^ " Annotation:" ^ @tid ^ " Referent:" ^ properties:last(@normalization-feature)
      </columns>
    </normalizations>

    <relations class="TabularExport">
      <files>documents</files>
      <fileName>"relations/" ^ @external-id ^ ".rel"</fileName>
      <lines>sort:ival(sections.relations[@kind == "relation"].tuples, args[args:frag0]{0}.args:frag0.start)</lines>
      <columns separator="|">
	@rid|
	@__TYPE ^ " " ^ str:join:' '(nav:arguments, @role ^ ":" ^ @rid ^ @tid)
      </columns>
    </relations>
  </write>
</alvisnlp-plan>
