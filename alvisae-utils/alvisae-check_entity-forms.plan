<alvisnlp-plan id="entity-forms">
  <param name="entries">
    <alias module="entries" param="target"/>
  </param>

  <param name="caseInsensitive">
    <alias module="project" param="caseInsensitive"/>
  </param>

  <param name="wordStartCaseInsensitive">
    <alias module="project" param="wordStartCaseInsensitive"/>
  </param>

  <param name="outFile">
    <alias module="write-seen" param="corpusFile"/>
    <alias module="write-unseen" param="corpusFile"/>
  </param>

  <entries class="Action">
    <target>documents.sections.relations[@kind == "text-bound"].tuples</target>
    <action>set:feat:entity-check_entity-forms("please-check")</action>
    <setFeatures/>
  </entries>

  <match-relation class="Action">
    <target>documents.sections</target>
    <action>new:relation:entity-check_entity-forms</action>
    <createRelations/>
  </match-relation>

  <project class="ElementProjector">
    <entries>sort:nsval(documents.sections.relations.tuples[@entity-check_entity-forms == "please-check"], @form ^ "__" ^ @type)</entries>
    <key>@form</key>
    <targetLayer>entity-check_entity-forms</targetLayer>
    <action>
      $ as target.section.relations:entity-check_entity-forms.new:tuple.(
        set:arg:match(target) |
        set:arg:entry(entry)
      )
    </action>
    <createTuples/>
    <setArguments/>
  </project>

  <overlaps>
    <annotations class="RemoveOverlaps">
      <layer>entity-check_entity-forms</layer>
    </annotations>

    <tuples class="Action">
      <target>documents.sections.relations:entity-check_entity-forms.tuples[not args:match]</target>
      <action>delete</action>
      <deleteElements/>
    </tuples>
  </overlaps>

  <seen>
    <exact class="Action">
      <target>documents.sections.relations:entity-check_entity-forms.tuples</target>
      <action>
	args:match.span:alvisae.nav:tuples(@type) as seen.
	target.(
	  set:feat:seen-boundaries("boundaries-exact") |
	  set:arg:seen(seen)
	)
      </action>
      <setFeatures/>
      <setArguments/>
    </exact>

    <remove-self-match class="Action">
      <target>documents.sections.relations:entity-check_entity-forms.tuples[args:entry.id:unique == args:seen.id:unique]</target>
      <action>
	delete
      </action>
      <deleteElements/>
    </remove-self-match>

    <broader class="Action">
      <target>documents.sections.relations:entity-check_entity-forms.tuples[not args:seen]</target>
      <action>
	args:match.outside:alvisae.nav:tuples(@type) as seen.
	target.(
	  set:feat:seen-boundaries("boundaries-broader") |
	  set:arg:seen(seen)
	)
      </action>
      <setFeatures/>
      <setArguments/>
    </broader>

    <narrower class="Action">
      <target>documents.sections.relations:entity-check_entity-forms.tuples[not args:seen]</target>
      <action>
	args:match.inside:alvisae.nav:tuples(@type) as seen.
	target.(
	  set:feat:seen-boundaries("boundaries-narrower") |
	  set:arg:seen(seen)
	)
      </action>
      <setFeatures/>
      <setArguments/>
    </narrower>

    <overlapping class="Action">
      <target>documents.sections.relations:entity-check_entity-forms.tuples[not args:seen]</target>
      <action>
	args:match.overlapping:alvisae.nav:tuples(@type) as seen.
	target.(
	  set:feat:seen-boundaries("boundaries-overlapping") |
	  set:arg:seen(seen)
	)
      </action>
      <setFeatures/>
      <setArguments/>
    </overlapping>

    <type-comparison class="Action">
      <target>documents.sections.relations:entity-check_entity-forms.tuples[args:seen]</target>
      <action>
	set:feat:seen-type(if args:seen.@type == args:entry.@type then "type-identical" else "type-mismatch")
      </action>
      <setFeatures/>
    </type-comparison>

    <other class="Action">
      <target>documents.sections.relations:entity-check_entity-forms.tuples[not args:seen]</target>
      <action>
	set:feat:seen-boundaries("boundaries-none")
      </action>
      <setFeatures/>
    </other>
  </seen>

  <write-seen class="TabularExport">
    <outDir>.</outDir>
    <lines>documents.sections.relations:entity-check_entity-forms.tuples[@seen-boundaries != "boundaries-exact" and @seen-boundaries != "boundaries-none" and @seen-type != "type-identical"]</lines>
    <columns separator=";">
      @seen-boundaries;
      @seen-type;
      args:entry.relation.section.document.@id;
      args:entry.relation.section.document.@external-id;
      args:entry.@type;
      str:normalizeSpace(args:entry.@form);
      args:entry.(@start_ ^ "-" ^ @end_);
      args:seen.relation.section.document.@id;
      args:seen.relation.section.document.@external-id;
      args:seen.@type;
      str:normalizeSpace(args:seen.@form);
      args:seen.(@start_ ^ "-" ^ @end_)
    </columns>
    <headers>
      "DIFF_BOUNDARIES",
      "DIFF_TYPE",
      "ENTRY_DOCID",
      "ENTRY_EXTDOCID",
      "ENTRY_TYPE",
      "ENTRY_FORM",
      "ENTRY_OFFSET",
      "MATCH_DOCID",
      "MATCH_EXTDOCID",
      "MATCH_TYPE",
      "MATCH_FORM",
      "MATCH_OFFSET"
    </headers>
  </write-seen>


  <write-unseen class="TabularExport">
    <append/>
    <outDir>.</outDir>
    <lines>documents.sections.relations:entity-check_entity-forms.tuples[@seen-boundaries == "boundaries-none"]</lines>
    <columns separator=";">
      @seen-boundaries;
      "";
      args:entry.relation.section.document.@id;
      args:entry.relation.section.document.@external-id;
      args:entry.@type;
      str:normalizeSpace(args:entry.@form);
      args:entry.(@start_ ^ "-" ^ @end_);
      args:match.section.document.@id;
      args:match.section.document.@external-id;
      "";
      str:normalizeSpace(args:match.@form);
      args:match.(start ^ "-" ^ end)
    </columns>
    <headers>
      "DIFF_BOUNDARIES",
      "DIFF_TYPE",
      "ENTRY_DOCID",
      "ENTRY_EXTDOCID",
      "ENTRY_TYPE",
      "ENTRY_FORM",
      "ENTRY_OFFSET",
      "MATCH_DOCID",
      "MATCH_EXTDOCID",
      "MATCH_TYPE",
      "MATCH_FORM",
      "MATCH_OFFSET"
    </headers>
  </write-unseen>
</alvisnlp-plan>
